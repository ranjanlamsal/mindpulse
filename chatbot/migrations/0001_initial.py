# Generated by Django 5.2.5 on 2025-08-30 16:07

import chatbot.models
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Conversation',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.BigIntegerField(default=chatbot.models.generate_secure_random_id, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(default='Emotional Support Chat', max_length=255)),
                ('favourite', models.BooleanField(default=False)),
                ('archive', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('active', 'Active'), ('archived', 'Archived'), ('ended', 'Ended'), ('requires_attention', 'Requires Attention')], default='active', max_length=20)),
                ('conversation_summary', models.TextField(blank=True, help_text='AI-generated summary of the conversation')),
                ('key_topics', models.JSONField(default=list, help_text='Important topics discussed')),
                ('emotional_analysis', models.JSONField(default=dict, help_text='Overall emotional analysis of conversation')),
                ('context_window', models.JSONField(default=list, help_text='Recent context for memory')),
                ('memory_anchors', models.JSONField(default=list, help_text='Important message IDs for memory retrieval')),
                ('support_type_used', models.JSONField(default=list, help_text='Types of support provided (listening, advice, resources, etc.)')),
                ('crisis_flags', models.JSONField(default=list, help_text='Crisis or high-stress indicators detected')),
                ('follow_up_needed', models.BooleanField(default=False, help_text='Whether follow-up is needed')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='ConversationContext',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('current_topic', models.CharField(blank=True, max_length=255)),
                ('user_mood', models.CharField(blank=True, max_length=50)),
                ('emotional_state', models.CharField(blank=True, max_length=50)),
                ('conversation_flow', models.JSONField(default=list, help_text='Flow of conversation topics')),
                ('active_memories', models.JSONField(default=list, help_text='Currently active memory IDs')),
                ('context_variables', models.JSONField(default=dict, help_text='Dynamic context variables')),
                ('current_support_type', models.CharField(blank=True, help_text='Current type of support being provided', max_length=50)),
                ('escalation_needed', models.BooleanField(default=False)),
                ('last_crisis_check', models.DateTimeField(blank=True, null=True)),
                ('conversation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='context', to='chatbot.conversation')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ConversationMemory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('memory_type', models.CharField(choices=[('short_term', 'Short Term'), ('long_term', 'Long Term'), ('episodic', 'Episodic'), ('semantic', 'Semantic')], max_length=20)),
                ('title', models.CharField(help_text='Title or key for the memory', max_length=255)),
                ('content', models.TextField(help_text='Memory content')),
                ('context', models.JSONField(default=dict, help_text='Additional context data')),
                ('importance_score', models.FloatField(default=0.0, help_text='Memory importance score (0-1)')),
                ('access_count', models.IntegerField(default=0, help_text='How many times this memory was accessed')),
                ('last_accessed', models.DateTimeField(auto_now=True)),
                ('expires_at', models.DateTimeField(blank=True, help_text='When this memory expires', null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memories', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-importance_score', '-last_accessed'],
            },
        ),
        migrations.CreateModel(
            name='EmotionalSupportLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('action_type', models.CharField(choices=[('listening', 'Active Listening'), ('advice', 'Advice Given'), ('resources', 'Resources Provided'), ('validation', 'Emotional Validation'), ('crisis_response', 'Crisis Response'), ('follow_up', 'Follow-up Scheduled')], max_length=50)),
                ('action_description', models.TextField()),
                ('effectiveness_score', models.FloatField(blank=True, help_text='Effectiveness score based on user response', null=True)),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='support_logs', to='chatbot.conversation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('content', models.TextField()),
                ('is_from_user', models.BooleanField(default=True)),
                ('embedding_vector', models.JSONField(blank=True, help_text='Message embedding for similarity search', null=True)),
                ('importance_score', models.FloatField(default=0.0, help_text='Message importance for memory retention')),
                ('emotions', models.JSONField(default=dict, help_text='Detected emotions in the message')),
                ('entities', models.JSONField(default=list, help_text='Named entities extracted from message')),
                ('intent', models.CharField(blank=True, help_text='Detected user intent', max_length=100)),
                ('stress_indicators', models.JSONField(default=list, help_text='Stress indicators detected in message')),
                ('support_request', models.CharField(blank=True, help_text='Type of support being requested (advice, listening, resources, etc.)', max_length=50)),
                ('crisis_level', models.CharField(choices=[('none', 'None'), ('low', 'Low'), ('moderate', 'Moderate'), ('high', 'High'), ('critical', 'Critical')], default='none', max_length=20)),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='chatbot.conversation')),
                ('in_reply_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='replies', to='chatbot.message')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserPersonality',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('communication_style', models.CharField(default='empathetic', help_text='empathetic, supportive, professional, casual', max_length=50)),
                ('emotional_state', models.CharField(default='neutral', help_text='Current emotional state detected from interactions', max_length=50)),
                ('stress_level', models.CharField(choices=[('low', 'Low'), ('moderate', 'Moderate'), ('high', 'High'), ('critical', 'Critical')], default='low', max_length=20)),
                ('interests', models.JSONField(default=list, help_text='List of user interests')),
                ('preferences', models.JSONField(default=dict, help_text='User preferences and settings')),
                ('conversation_patterns', models.JSONField(default=dict, help_text='Learned conversation patterns')),
                ('support_preferences', models.JSONField(default=dict, help_text='Preferred types of emotional support (listening, advice, resources, etc.)')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='personality', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddIndex(
            model_name='conversation',
            index=models.Index(fields=['user', 'status'], name='chatbot_con_user_id_db3769_idx'),
        ),
        migrations.AddIndex(
            model_name='conversation',
            index=models.Index(fields=['status', 'follow_up_needed'], name='chatbot_con_status_592509_idx'),
        ),
        migrations.AddIndex(
            model_name='conversation',
            index=models.Index(fields=['updated_at'], name='chatbot_con_updated_598a82_idx'),
        ),
        migrations.AddIndex(
            model_name='conversationmemory',
            index=models.Index(fields=['user', 'memory_type'], name='chatbot_con_user_id_4642b6_idx'),
        ),
        migrations.AddIndex(
            model_name='conversationmemory',
            index=models.Index(fields=['importance_score'], name='chatbot_con_importa_dc02c1_idx'),
        ),
        migrations.AddIndex(
            model_name='conversationmemory',
            index=models.Index(fields=['last_accessed'], name='chatbot_con_last_ac_5ff6d3_idx'),
        ),
        migrations.AddIndex(
            model_name='emotionalsupportlog',
            index=models.Index(fields=['conversation', 'action_type'], name='chatbot_emo_convers_6ba0f4_idx'),
        ),
        migrations.AddIndex(
            model_name='emotionalsupportlog',
            index=models.Index(fields=['user', 'created_at'], name='chatbot_emo_user_id_6dc1ac_idx'),
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['conversation', '-created_at'], name='chatbot_mes_convers_1d1f34_idx'),
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['importance_score'], name='chatbot_mes_importa_505ef4_idx'),
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['crisis_level'], name='chatbot_mes_crisis__d54c9b_idx'),
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['is_from_user', 'created_at'], name='chatbot_mes_is_from_e59eb6_idx'),
        ),
    ]
